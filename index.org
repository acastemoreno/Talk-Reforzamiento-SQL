* Slide Options                           :noexport:
# ======= Appear in cover-slide ====================
#+TITLE: Reforzamiento SQL
#+SUBTITLE:  SQL(PostgreSQL) desde Ruby
#+COMPANY: Codeable
#+AUTHOR: Albert Castellano Moreno

# ======= Appear in thank-you-slide ================
#+GITHUB: http://github.com/acastemoreno

# ======= Appear under each slide ==================
#+FAVICON: images/ruby.png
#+ICON: images/ruby.png
#+HASHTAG: #SQL #Ruby #Codeable

# ======= Google Analytics =========================
#+ANALYTICS: ----

# ======= Org settings =========================
#+EXCLUDE_TAGS: noexport
#+OPTIONS: toc:nil num:nil ^:nil

* Crear un usuario
  :PROPERTIES:
  :SLIDE:    segue dark quote
  :ASIDE:    right bottom
  :ARTICLE:  flexbox vleft auto-fadein
  :END:
Con el usuario crearemos una base de datos

** Crear usuario desde pgadmin
#+BEGIN_CENTER
#+ATTR_HTML: :height 400px
[[file:images/crear-login-role.png]]
#+END_CENTER

** Nombre de usuario, password y privilegios
Setear
- username: Pestaña General -> Name
- password: Pestaña Definition -> Password

** Privilegios de usuario
#+BEGIN_CENTER
#+ATTR_HTML: :height 400px
[[file:images/privilegio-role.png]]
#+END_CENTER

* Crear base de datos
  :PROPERTIES:
  :SLIDE:    segue dark quote
  :ASIDE:    right bottom
  :ARTICLE:  flexbox vleft auto-fadein
  :END:
Usando al usuario anteriormente creado

** Crear base de datos con SQL sentence
#+BEGIN_SRC shell
$ psql -h localhost -d postgres -U amiguito -W 
# Se creara un prompt para escribir la contraseña del usuario
Password: 
.
.
.
postgres=> CREATE DATABASE "reforfamiento-sql";
CREATE DATABASE
#+END_SRC

** Crear base de datos desde Ruby
#+BEGIN_SRC ruby
require 'pg'

conn = PG.connect(dbname: <b>'postgres'</b>, host: <b>"localhost"</b>, 
  user: <b>"amiguito"</b>, password: <b>"123456789"</b>)
conn.exec('<b>CREATE DATABASE "reforfamiento-sql"</b>')
#+END_SRC

* Crear tablas
  :PROPERTIES:
  :SLIDE:    segue dark quote
  :ASIDE:    right bottom
  :ARTICLE:  flexbox vleft auto-fadein
  :END:

** SQL syntaxis para crear tablas
#+BEGIN_SRC SQL
CREATE TABLE [IF NOT EXISTS] mytable (
    column_name1 DataType1 [Constraint] [DEFAULT default_value1],
    column_name2 DataType2 [Constraint] [DEFAULT default_value2],
    …
);
#+END_SRC

** Aclaraciones
  :PROPERTIES:
  :ARTICLE:  larger
  :END:
- []: significa opcional
- *column_name*: Nombre de columna.
- *DataType*: Tipo de dato almacenado.
- *[Constraint]*: 1 a más restricciones que debe cumplir la data almacenada. Puede existe mas de un constraint
- *[DEFAULT default_value]*: Valor por defecto en caso no se especifique valor de column cuando se crea un registro(row)

** Datatypes
Los mas comunes
- *INTEGER*: Numeros enteros.
- *FLOAT*: Numeros con punto flotante.
- *SERIAL*: Integer autoincrementado, generalmente usado para PK.
- *VARCHAR(<num_char>)*: Strings,  *<num_char>* indica la cantidad de caracteres que se almacena. Estable tambien el maximo numero de caracteres almacenados.

#+ATTR_HTML: :class note
#+BEGIN_QUOTE
solo para nota[fn:1]
#+END_QUOTE

* Constraints
  :PROPERTIES:
  :SLIDE:    segue dark quote
  :ASIDE:    right bottom
  :ARTICLE:  flexbox vleft auto-fadein
  :END:
Restricciones que debe cumplir la data para ser agregada o modificada.

** Constraints: CHECK
Es el Constraint mas generico. Permite especificar un expresion que debe retornar =true= para todo registro valido.
#+BEGIN_SRC SQL
CREATE TABLE products (
    id SERIAL PRIMARY KEY,
    name VARCHAR(30),
    price FLOAT,
    <b>CHECK (price > 0)</b>
);
#+END_SRC
#+ATTR_HTML: :class note
#+BEGIN_QUOTE
solo para nota[fn:2]
#+END_QUOTE

** Constraints: CHECK permite crear un nombre para el constraint
#+BEGIN_SRC SQL
CREATE TABLE products (
    id SERIAL PRIMARY KEY,
    name VARCHAR(30),
    price FLOAT,
    <b>CONSTRAINT positive_price CHECK (price > 0)</b>
);
#+END_SRC

#+ATTR_HTML: :class note
#+BEGIN_QUOTE
solo para nota[fn:2]
#+END_QUOTE

** Constraints: =NOT NULL=
Indica que todos los registro deben contener informacion en determinada columna.
#+BEGIN_SRC SQL
CREATE TABLE "products" (
    "id" SERIAL,
    "name" VARCHAR(30),
    "price" FLOAT <b>NOT NULL</b>
);
#+END_SRC
#+ATTR_HTML: :class note
#+BEGIN_QUOTE
solo para nota[fn:2]
#+END_QUOTE

** Constraints: =PK=
Indica que una columna (o grupo de columnas) es usada como identificadores unico para cada registro en la tabla. La data almacenada en esta columna no pueden repetirse.
#+BEGIN_SRC SQL
CREATE TABLE "products" (
    "id" SERIAL <b>PRIMARY KEY</b>,
    "name" VARCHAR(30),
    "price" FLOAT
);
#+END_SRC
#+ATTR_HTML: :class note
#+BEGIN_QUOTE
solo para nota[fn:2]
#+END_QUOTE

** Constraints: Composite =PK=
#+BEGIN_SRC SQL
CREATE TABLE "project" (
    "user_id" INTEGER,
    "project_id" INTEGER,
    <b>PRIMARY KEY("user_id", "project_id")</b>
);
#+END_SRC
#+ATTR_HTML: :class note
#+BEGIN_QUOTE
solo para nota[fn:2]
#+END_QUOTE

** Constraints: =UNIQUE=
Indica que la informacion almacenada en una columna (o grupo de columnas) no puede repetirse entre los registros de la tabla.
#+BEGIN_SRC SQL
CREATE TABLE "products" (
    "id" SERIAL PRIMARY KEY,
    "name" VARCHAR(30) <b>UNIQUE</b>,
    "price" FLOAT
);
#+ATTR_HTML: :class note
#+BEGIN_QUOTE
solo para nota[fn:2]
#+END_QUOTE

** Constraints: Composite =UNIQUE=
#+BEGIN_SRC SQL
CREATE TABLE "project" (
    "id" SERIAL PRIMARY KEY,
    "user_id" INTEGER,
    "project_id" INTEGER,
    <b>UNIQUE("user_id", "project_id")</b>
);
#+END_SRC
#+ATTR_HTML: :class note
#+BEGIN_QUOTE
solo para nota[fn:2]
#+END_QUOTE

** Constraints: =FOREIGN KEY=
Especifica que los valores contenido en una columna (o grupo de columnas) aparecen en la otra columna de otra tabla.
#+BEGIN_SRC SQL
CREATE TABLE "project" (
    "id" SERIAL PRIMARY KEY,
    "user_id" INTEGER <b>REFERENCES "User"(id)</b>,
    "project_id" INTEGER <b>REFERENCES "Project"(id)</b>
);

CREATE TABLE "project" (
    "id" SERIAL PRIMARY KEY,
    "user_id" INTEGER,
    "project_id" INTEGER,
    <b>FOREIGN KEY ("user_id") REFERENCES "User"(id),
    FOREIGN KEY ("project_id") REFERENCES "Project"(id)</b>,
);
#+END_SRC
#+ATTR_HTML: :class note
#+BEGIN_QUOTE
solo para nota[fn:2]
#+END_QUOTE


** Crear tablas con SQL sentence
  :PROPERTIES:
  :ARTICLE:  smaller
  :END:
#+BEGIN_SRC SQL
CREATE TABLE IF NOT EXISTS timetracker();

CREATE TABLE IF NOT EXISTS "User"(
   "id" SERIAL PRIMARY KEY,
   "name" VARCHAR(25) NOT NULL,
   "email" VARCHAR(25) NOT NULL,
   "role" VARCHAR(20) NOT NULL,
   "rate" INTEGER CHECK (rate >= 0)
);

CREATE TABLE IF NOT EXISTS "Project"(
   "id" SERIAL PRIMARY KEY ,
   "name" VARCHAR(25) NOT NULL,
   "category" VARCHAR(25) NOT NULL,
   "start" DATE NOT NULL,
   "end" DATE NOT NULL,
   "closed" BOOLEAN NOT NULL DEFAULT false
);
#+END_SRC

** Crear tablas desde Ruby
  :PROPERTIES:
  :ARTICLE:  smaller
  :END:
#+BEGIN_SRC ruby
require 'pg'

conn = PG.connect(dbname: 'reforfamiento-sql', host: "localhost",
  user: "amiguito", password: "123456789")

conn.exec('
  <b>CREATE TABLE <b>IF NOT EXISTS</b> timetracker();</b>
')

conn.exec('
  <b>CREATE TABLE <b>IF NOT EXISTS</b> "User"(
    "id" SERIAL PRIMARY KEY,
    "name" VARCHAR(25) NOT NULL,
    "email" VARCHAR(25) NOT NULL,
    "role" VARCHAR(20) NOT NULL,
    "rate" INTEGER CHECK (rate >= 0)
  );</b>
')
#+END_SRC

** Crear tablas desde Ruby (continue code)
  :PROPERTIES:
  :ARTICLE:  smaller
  :END:
#+BEGIN_SRC ruby
conn.exec('
  <b>CREATE TABLE IF NOT EXISTS "Project"(
    "id" SERIAL PRIMARY KEY ,
    "name" VARCHAR(25) NOT NULL,
    "category" VARCHAR(25) NOT NULL,
    "start" DATE NOT NULL,
    "end" DATE NOT NULL,
    "closed" BOOLEAN NOT NULL DEFAULT false
  );</b>
')
#+END_SRC

* Gracias ˊ・ω・ˋ
:PROPERTIES:
:SLIDE: thank-you-slide segue
:ASIDE: right
:ARTICLE: flexbox vleft auto-fadein
:END:

* Footnotes
[fn:1] [[https://www.postgresql.org/docs/12/datatype.html][Doc - PostgreSQL Datatypes]]
[fn:2] [[https://www.postgresql.org/docs/12/ddl-constraints.html][Doc - PostgreSQL Constraints]]
