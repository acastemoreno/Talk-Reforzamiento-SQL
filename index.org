* Slide Options                           :noexport:
# ======= Appear in cover-slide ====================
#+TITLE: Reforzamiento SQL
#+SUBTITLE:  SQL(PostgreSQL) desde Ruby
#+COMPANY: Codeable
#+AUTHOR: Albert Castellano Moreno

# ======= Appear in thank-you-slide ================
#+GITHUB: http://github.com/acastemoreno

# ======= Appear under each slide ==================
#+FAVICON: images/ruby.png
#+ICON: images/ruby.png
#+HASHTAG: #SQL #Ruby #Codeable

# ======= Google Analytics =========================
#+ANALYTICS: ----

# ======= Org settings =========================
#+EXCLUDE_TAGS: noexport
#+OPTIONS: toc:nil num:nil ^:nil

* Crear un usuario
  :PROPERTIES:
  :SLIDE:    segue dark quote
  :ASIDE:    right bottom
  :ARTICLE:  flexbox vleft auto-fadein
  :END:
Con el usuario crearemos una base de datos

** Crear usuario desde pgadmin
#+BEGIN_CENTER
#+ATTR_HTML: :height 400px
[[file:images/crear-login-role.png]]
#+END_CENTER

** Nombre de usuario, password y privilegios
Setear
- username: Pestaña General -> Name
- password: Pestaña Definition -> Password

** Privilegios de usuario
#+BEGIN_CENTER
#+ATTR_HTML: :height 400px
[[file:images/privilegio-role.png]]
#+END_CENTER

* Crear base de datos
  :PROPERTIES:
  :SLIDE:    segue dark quote
  :ASIDE:    right bottom
  :ARTICLE:  flexbox vleft auto-fadein
  :END:
Usando al usuario anteriormente creado

** Crear base de datos con SQL sentence
#+BEGIN_SRC shell
$ psql -h localhost -d postgres -U amiguito -W 
# Se creara un prompt para escribir la contraseña del usuario
Password: 
.
.
.
postgres=> CREATE DATABASE "reforzamiento-sql";
CREATE DATABASE
#+END_SRC

** Crear base de datos desde Ruby
#+BEGIN_SRC ruby
require 'pg'

conn = PG.connect(dbname: 'postgres', host: "localhost", 
  user: "amiguito", password: "123456789")

begin
  conn.exec('CREATE DATABASE "reforzamiento-sql"')
rescue StandardError => e
  puts e.message
end
#+END_SRC

* Crear tablas
  :PROPERTIES:
  :SLIDE:    segue dark quote
  :ASIDE:    right bottom
  :ARTICLE:  flexbox vleft auto-fadein
  :END:

** Syntaxis SQL  para crear tablas
#+BEGIN_SRC SQL
CREATE TABLE [IF NOT EXISTS] mytable (
    column_name1 DataType1 [Constraint] [DEFAULT default_value1],
    column_name2 DataType2 [Constraint] [DEFAULT default_value2],
    …
);
#+END_SRC

** Aclaraciones
  :PROPERTIES:
  :ARTICLE:  larger
  :END:
- []: significa opcional
- *column_name*: Nombre de columna.
- *DataType*: Tipo de dato almacenado.
- *[Constraint]*: 1 a más restricciones que debe cumplir la data almacenada. Puede existe mas de un constraint
- *[DEFAULT default_value]*: Valor por defecto en caso no se especifique valor de column cuando se crea un registro(row)

** Datatypes
Los mas comunes
- *INTEGER*: Numeros enteros.
- *FLOAT*: Numeros con punto flotante.
- *SERIAL*: Integer autoincrementado, generalmente usado para PK.
- *VARCHAR(<num_char>)*: Strings,  *<num_char>* indica la cantidad de caracteres que se almacena. Estable tambien el maximo numero de caracteres almacenados.

#+ATTR_HTML: :class note
#+BEGIN_QUOTE
solo para nota[fn:1]
#+END_QUOTE

* Constraints
  :PROPERTIES:
  :SLIDE:    segue dark quote
  :ASIDE:    right bottom
  :ARTICLE:  flexbox vleft auto-fadein
  :END:
Restricciones que debe cumplir la data para ser agregada o modificada.

** Constraints: CHECK
Es el Constraint mas generico. Permite especificar un expresion que debe retornar =true= para todo registro valido.
#+BEGIN_SRC SQL
CREATE TABLE products (
    id SERIAL PRIMARY KEY,
    name VARCHAR(30),
    price FLOAT,
    <b>CHECK (price > 0)</b>
);
#+END_SRC
#+ATTR_HTML: :class note
#+BEGIN_QUOTE
solo para nota[fn:2]
#+END_QUOTE

** Constraints: CHECK permite crear un nombre para el constraint
#+BEGIN_SRC SQL
CREATE TABLE products (
    id SERIAL PRIMARY KEY,
    name VARCHAR(30),
    price FLOAT,
    <b>CONSTRAINT positive_price CHECK (price > 0)</b>
);
#+END_SRC

#+ATTR_HTML: :class note
#+BEGIN_QUOTE
solo para nota[fn:2]
#+END_QUOTE

** Constraints: =NOT NULL=
Indica que todos los registro deben contener informacion en determinada columna.
#+BEGIN_SRC SQL
CREATE TABLE "products" (
    "id" SERIAL,
    "name" VARCHAR(30),
    "price" FLOAT <b>NOT NULL</b>
);
#+END_SRC
#+ATTR_HTML: :class note
#+BEGIN_QUOTE
solo para nota[fn:2]
#+END_QUOTE

** Constraints: =PK=
Indica que una columna (o grupo de columnas) es usada como identificadores unico para cada registro en la tabla. La data almacenada en esta columna no pueden repetirse.
#+BEGIN_SRC SQL
CREATE TABLE "products" (
    "id" SERIAL <b>PRIMARY KEY</b>,
    "name" VARCHAR(30),
    "price" FLOAT
);
#+END_SRC
#+ATTR_HTML: :class note
#+BEGIN_QUOTE
solo para nota[fn:2]
#+END_QUOTE

** Constraints: Composite =PK=
#+BEGIN_SRC SQL
CREATE TABLE "project" (
    "user_id" INTEGER,
    "project_id" INTEGER,
    <b>PRIMARY KEY("user_id", "project_id")</b>
);
#+END_SRC
#+ATTR_HTML: :class note
#+BEGIN_QUOTE
solo para nota[fn:2]
#+END_QUOTE

** Constraints: =UNIQUE=
Indica que la informacion almacenada en una columna (o grupo de columnas) no puede repetirse entre los registros de la tabla.
#+BEGIN_SRC SQL
CREATE TABLE "products" (
    "id" SERIAL PRIMARY KEY,
    "name" VARCHAR(30) <b>UNIQUE</b>,
    "price" FLOAT
);
#+END_SRC
#+ATTR_HTML: :class note
#+BEGIN_QUOTE
solo para nota[fn:2]
#+END_QUOTE

** Constraints: Composite =UNIQUE=
#+BEGIN_SRC SQL
CREATE TABLE "project" (
    "id" SERIAL PRIMARY KEY,
    "user_id" INTEGER,
    "project_id" INTEGER,
    <b>UNIQUE("user_id", "project_id")</b>
);
#+END_SRC
#+ATTR_HTML: :class note
#+BEGIN_QUOTE
solo para nota[fn:2]
#+END_QUOTE

** Constraints: =FOREIGN KEY=:
  :PROPERTIES:
  :ARTICLE:  smaller
  :END:

Especifica que los valores contenido en una columna (o grupo de columnas) aparecen unaS columna de otra tabla.
#+BEGIN_SRC SQL
CREATE TABLE "project" (
    "id" SERIAL PRIMARY KEY,
    "user_id" INTEGER <b>REFERENCES "User"(id)</b>,
    "project_id" INTEGER <b>REFERENCES "Project"(id)</b>
);

CREATE TABLE "project" (
    "id" SERIAL PRIMARY KEY,
    "user_id" INTEGER,
    "project_id" INTEGER,
    <b>FOREIGN KEY ("user_id") REFERENCES "User"(id),
    FOREIGN KEY ("project_id") REFERENCES "Project"(id)</b>,
);
#+END_SRC
#+ATTR_HTML: :class note
#+BEGIN_QUOTE
solo para nota[fn:2]
#+END_QUOTE

** Crear tablas con SQL sentence
  :PROPERTIES:
  :ARTICLE:  smaller
  :END:
#+BEGIN_SRC SQL
CREATE TABLE IF NOT EXISTS timetracker();

CREATE TABLE IF NOT EXISTS "User"(
   "id" SERIAL PRIMARY KEY,
   "name" VARCHAR(25) NOT NULL,
   "email" VARCHAR(25) NOT NULL,
   "role" VARCHAR(20) NOT NULL,
   "rate" INTEGER CHECK (rate >= 0)
);

CREATE TABLE IF NOT EXISTS "Project"(
   "id" SERIAL PRIMARY KEY ,
   "name" VARCHAR(25) NOT NULL UNIQUE,
   "category" VARCHAR(25) NOT NULL,
   "start" DATE NOT NULL,
   "end" DATE NOT NULL,
   "closed" BOOLEAN NOT NULL DEFAULT false
);
#+END_SRC


** Crear tablas con SQL sentence
  :PROPERTIES:
  :ARTICLE:  smaller
  :END:
#+BEGIN_SRC SQL
CREATE TABLE IF NOT EXISTS "User-Project"(
   "id" SERIAL PRIMARY KEY,
   "user_id" INTEGER REFERENCES "User"(id) NOT NULL,
   "project_id" INTEGER REFERENCES "Project"(id) NOT NULL,
   "total_budget" INTEGER CHECK (total_budget >= 0) NOT NULL
);

CREATE TABLE IF NOT EXISTS "Daily-Log"(
   "id" SERIAL PRIMARY KEY,
   "project-member_id" INTEGER REFERENCES "User-Project"(id),
   "date" DATE NOT NULL,
   "hours" INTEGER CHECK (hours >= 0) NOT NULL
);
#+END_SRC

** Crear tablas desde Ruby
  :PROPERTIES:
  :ARTICLE:  smaller
  :END:
#+BEGIN_SRC ruby
require 'pg'

conn = PG.connect(dbname: 'reforfamiento-sql', host: "localhost",
  user: "amiguito", password: "123456789")

conn.exec('
  <b>CREATE TABLE <b>IF NOT EXISTS</b> "User"(
    "id" SERIAL PRIMARY KEY,
    "name" VARCHAR(25) NOT NULL,
    "email" VARCHAR(25) NOT NULL,
    "role" VARCHAR(20) NOT NULL,
    "rate" INTEGER CHECK (rate >= 0)
  );</b>
')
#+END_SRC

** Crear tablas desde Ruby (continue code)
  :PROPERTIES:
  :ARTICLE:  smaller
  :END:

#+BEGIN_SRC ruby
conn.exec('
  <b>CREATE TABLE IF NOT EXISTS "Project"(
    "id" SERIAL PRIMARY KEY ,
    "name" VARCHAR(25) NOT NULL UNIQUE,
    "category" VARCHAR(25) NOT NULL,
    "start" DATE NOT NULL,
    "end" DATE NOT NULL,
    "closed" BOOLEAN NOT NULL DEFAULT false
  );</b>
')

conn.exec('
  <b>CREATE TABLE IF NOT EXISTS "User-Project"(
    "id" SERIAL PRIMARY KEY,
    "user_id" INTEGER REFERENCES "User"(id) NOT NULL,
    "project_id" INTEGER REFERENCES "Project"(id) NOT NULL,
    "total_budget" INTEGER CHECK (total_budget >= 0) NOT NULL
  );</b>
')
#+END_SRC

** Crear tablas desde Ruby (continue code)
  :PROPERTIES:
  :ARTICLE:  smaller
  :END:

#+BEGIN_SRC ruby
conn.exec('
  <b>CREATE TABLE IF NOT EXISTS "Daily-Log"(
    "id" SERIAL PRIMARY KEY,
    "project-member_id" INTEGER REFERENCES "User-Project"(id),
    "date" DATE NOT NULL,
    "hours" INTEGER CHECK (hours >= 0) NOT NULL
  );</b>
')
#+END_SRC

* Modificar tablas
  :PROPERTIES:
  :SLIDE:    segue dark quote
  :ASIDE:    right bottom
  :ARTICLE:  flexbox vleft auto-fadein
  :END:

** Syntaxis SQL para modificar estructura de tablas
#+BEGIN_SRC SQL
ALTER TABLE [IF EXISTS] "User"
  RENAME TO new_table_name, 
  RENAME COLUMN old_column_name TO now_column_name,
  DROP column_to_deleted,
  ADD new_column DataType [Constraint] [DEFAULT default_value],
  ALTER COLUMN column_to_be_update TYPE DataType [Constraint] [DEFAULT default_value], 
  ADD CONSTRAINT new_contraint_name CONTRAINT_SENTENCE,
  ALTER CONSTRAINT contraint_name NEW_CONTRAINT_SENTENCE
;
#+END_SRC

#+ATTR_HTML: :class note
#+BEGIN_QUOTE
solo para nota[fn:3]
#+END_QUOTE

** Modificar tablas con SQL sentence
  :PROPERTIES:
  :ARTICLE:  smaller
  :END:

#+BEGIN_SRC SQL
ALTER TABLE IF EXISTS "User"
   ALTER COLUMN "name" TYPE VARCHAR(50),
   ALTER COLUMN "role" TYPE VARCHAR(50),
   ADD CONSTRAINT "User_name_length_check" CHECK (LENGTH("name") <= 50 ),
   ADD CONSTRAINT "User_role_length_check" CHECK (LENGTH("role") <= 50 ),
   ADD CONSTRAINT "User_email_key" UNIQUE ("email")
;

ALTER TABLE IF EXISTS "Project"
   ADD CONSTRAINT "End_after_start_check" CHECK ("end" > "start" )
;

ALTER TABLE IF EXISTS "User-Project"
   ADD CONSTRAINT "User-Project_unique" UNIQUE("user_id", "project_id")
;

ALTER TABLE IF EXISTS "Daily-Log"
   ADD CONSTRAINT "UserProject-date_unique" UNIQUE("project-member_id", "date")
;
#+END_SRC


** Modificar tablas desde Ruby
  :PROPERTIES:
  :ARTICLE:  smaller
  :END:

#+BEGIN_SRC Ruby
require 'pg'

conn = PG.connect(dbname: 'reforzamiento-sql', host: "localhost",
  user: "amiguito", password: "123456789")

begin
  conn.exec('
    <b>ALTER TABLE IF EXISTS "User"
      ALTER COLUMN "name" TYPE VARCHAR(50),
      ALTER COLUMN "role" TYPE VARCHAR(50),
      ADD CONSTRAINT "User_name_length_check" CHECK (LENGTH("name") <= 50 ),
      ADD CONSTRAINT "User_role_length_check" CHECK (LENGTH("role") <= 50 ),
      ADD CONSTRAINT "User_email_key" UNIQUE ("email")
    ;</b>
  ')
rescue StandardError => e
  puts e.message
end
#+END_SRC

** Modificar tablas desde Ruby (continue code)
  :PROPERTIES:
  :ARTICLE:  smaller
  :END:

#+BEGIN_SRC Ruby
begin
  conn.exec('
    <b>ALTER TABLE IF EXISTS "Project"
      ADD CONSTRAINT "End_after_start_check" CHECK ("end" > "start" )
    ;</b>
  ')
rescue StandardError => e
  puts e.message
end

begin
  conn.exec('
    <b>ALTER TABLE IF EXISTS "User-Project"
      ADD CONSTRAINT "User-Project_unique" UNIQUE("user_id", "project_id")
    ;</b>
  ')
rescue StandardError => e
  puts e.message
end
#+END_SRC

** Modificar tablas desde Ruby (continue code)
#+BEGIN_SRC Ruby
begin
  conn.exec('
    <b>ALTER TABLE IF EXISTS "Daily-Log"
      ADD CONSTRAINT "UserProject-date_unique" UNIQUE("project-member_id", "date")
    ;</b>
  ')
rescue StandardError => e
  puts e.message
end
#+END_SRC

* Insertar Datos a tabla
  :PROPERTIES:
  :SLIDE:    segue dark quote
  :ASIDE:    right bottom
  :ARTICLE:  flexbox vleft auto-fadein
  :END:

** Syntaxis SQL para ingresar datos a una tabla
#+BEGIN_SRC SQL
INSERT INTO mytable
(column1, column2, column3, column4, …)
VALUES (value_or_expr, another_value_or_expr, …),
       (value_or_expr_2, another_value_or_expr_2, …),
       …;
#+END_SRC

** Modificar tablas con SQL sentence
  :PROPERTIES:
  :ARTICLE:  smaller
  :END:
#+BEGIN_SRC SQL
INSERT INTO "User"
("name", "email", "role", "rate")
VALUES ('Renato', 'renato@codeable.pe', 'front-end developer senior', 30),
       ('Paty', 'paty@codeable.pe', 'back-end developer senior', 32),
       ('Franco', 'franco@codeable.pe', 'front-end developer junior', 15),
       ('Luis', 'luis@codeable.pe', 'back-end developer junior', 16)
;

INSERT INTO "Project"
("name", "category", "start", "end", "closed")
VALUES 
  ('Shiftme', 'Bussiness', '2020/05/13', '2020/08/11', false),
  ('Line Balancing', 'Bussiness', '2020/05/13', '2020/09/10', false),
  ('Overbooking', 'Bussiness', '2020/05/13', '2020/10/10', false),
  ('Kampu', 'Sport', '2020/05/13', '2020/06/27', false),
  ('Codeable App', 'Education', '2020/05/13', '2020/11/09', false)
;
#+END_SRC


** Insertar datos a tablas desde Ruby
  :PROPERTIES:
  :ARTICLE:  smaller
  :END:

#+BEGIN_SRC SQL
require 'pg'

conn = PG.connect(dbname: 'reforzamiento-sql', host: "localhost",
  user: "amiguito", password: "123456789")

begin
  conn.exec(<b>%Q(
    INSERT INTO "User"
    ("name", "email", "role", "rate")
    VALUES ('Renato', 'renato@codeable.pe', 'front-end developer senior', 30),
          ('Paty', 'paty@codeable.pe', 'back-end developer senior', 32),
          ('Franco', 'franco@codeable.pe', 'front-end developer junior', 15),
          ('Luis', 'luis@codeable.pe', 'back-end developer junior', 16)
    ;
  )</b>)
rescue StandardError => e
  puts e.message
end
#+END_SRC

#+ATTR_HTML: :class note
#+BEGIN_QUOTE
solo para nota[fn:4]
solo para nota[fn:5]
#+END_QUOTE

** Insertar datos a tablas desde Ruby (Continue code)
  :PROPERTIES:
  :ARTICLE:  smaller
  :END:

#+BEGIN_SRC SQL
begin
  conn.exec(<b>%Q(
    INSERT INTO "Project"
    ("name", "category", "start", "end", "closed")
    VALUES 
      ('Shiftme', 'Bussiness', '2020/05/13', '2020/08/11', false),
      ('Line Balancing', 'Bussiness', '2020/05/13', '2020/09/10', false),
      ('Overbooking', 'Bussiness', '2020/05/13', '2020/10/10', false),
      ('Kampu', 'Sport', '2020/05/13', '2020/06/27', false),
      ('Codeable App', 'Education', '2020/05/13', '2020/11/09', false)
    ;
  )</b>)
rescue StandardError => e
  puts e.message
end
#+END_SRC

#+ATTR_HTML: :class note
#+BEGIN_QUOTE
solo para nota[fn:4]
solo para nota[fn:5]
#+END_QUOTE

* Consultar Datos
  :PROPERTIES:
  :SLIDE:    segue dark quote
  :ASIDE:    right bottom
  :ARTICLE:  flexbox vleft auto-fadein
  :END:

** Syntaxis SQL para consultar datos
#+BEGIN_SRC SQL
<b>SELECT [DISTINCT] column, AGG_FUNC(column_or_expression), …
FROM mytable</b>
    JOIN another_table
      ON mytable.column = another_table.column
    WHERE expression
    GROUP BY column
    HAVING constraint_expression
    ORDER BY column ASC/DESC
    LIMIT count OFFSET COUNT;
#+END_SRC

** Proposito y secuencia de ejecución
  :PROPERTIES:
  :ARTICLE:  smaller
  :END:

1. *FROM mytable*: 

  Establece la tabla desde donde partiremos una busqueda.

2. *JOIN another_table*: 

  Establece el uso de la informacion de otra tabla.

3. *ON …*: 

  Establece relacion entre los row de las distintas tablas. Merge de datos entre tablas.

4. *WHERE expression*: 

  Sirven para seleccionar rows que cumplen determinada =expression=.

5. *GROUP BY column*: 

  Agrupa los resultados hasta el momento segun el valor de la columna especificada.

** Proposito y secuencia de ejecución (continue)
  :PROPERTIES:
  :ARTICLE:  smaller
  :END:

6. *HAVING having_expression*: 

  Si el query tiene la clausula *GROUP BY*, los resultados agrupados seran filtrados segun el cumplimiento del *having_expression*

7. *SELECT*

  Selecciona columnas o expresiones que quieres como resultado de la informacion recopilada hasta el momento.

8. *[DISTINT]*

  Elimina los valores duplicados.

9. *ORDER BY column ASC/DESC*

  Ordena los datos segun la informacion de determinadas columnas

10. *LIMIT count OFFSET COUNT*

  Limita la cantidad o offset de los rows devueltos.


* DEMO TIME
  :PROPERTIES:
  :SLIDE:    segue dark quote
  :ASIDE:    right bottom
  :ARTICLE:  flexbox vleft auto-fadein
  :END:

* Gracias ˊ・ω・ˋ
:PROPERTIES:
:SLIDE: thank-you-slide segue
:ASIDE: right
:ARTICLE: flexbox vleft auto-fadein
:END:

* Footnotes
[fn:1] [[https://www.postgresql.org/docs/12/datatype.html][Doc - PostgreSQL Datatypes]]
[fn:2] [[https://www.postgresql.org/docs/12/ddl-constraints.html][Doc - PostgreSQL Constraints]]
[fn:3] [[https://www.postgresql.org/docs/12/sql-altertable.html][Doc - PostgreSQL Alter Table]]
[fn:4] [[https://en.wikibooks.org/wiki/Ruby_Programming/Syntax/Literals#The_.25_Notation][The % Notation]]
[fn:5] [[https://simpleror.wordpress.com/2009/03/15/q-q-w-w-x-r-s/#q][More of % Notation]]
[fn:6] [[https://sqlbolt.com/lesson/select_queries_order_of_execution][Order of execution]]
